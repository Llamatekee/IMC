# Experiment 1 - Neural Network Evaluation

## Overview
This experiment evaluates the performance of a neural network using different architectures and datasets. The experiment involves testing various configurations, including different architectures and training scenarios.

## Network Architecture
- **Error Function:** Cross-entropy
- **Output Layer Activation Function:** Softmax (Offline version)

### XOR Problem
- Use the architecture that performed best in the previous lab assignment.

### ProPublica and noMNIST Problems
- Test 8 different architectures with one or two hidden layers.
- Hidden layer configurations: 4, 8, 16, or 64 neurons.

## Compilation
To compile the program, use the following command:
g++ -std=c++11 experiment1.cpp -o experiment1

## Execution
Run the compiled program with:
./experiment1

## Output
The program generates a file named results1.out containing all the required metrics. Additionally, five files named seed_x (where x ranges from 0 to 4) will be created. These files store the confusion matrix obtained for each seed in each run.




# Experiment 2 - Neural Network Evaluation

## Overview
This experiment continues the evaluation of the neural network with a focus on different configurations and datasets. The experiment involves testing various architectures and training scenarios, building on the insights gained from Experiment 1.

## Network Architecture
- **Error Function:** Cross-entropy
- **Output Layer Activation Function:** Softmax (Offline version)

### XOR, ProPublica and noMNIST Problems
- Evaluate multiple configurations.
- Test the following combinations (with the offline algorithm):
  1. MSE Error Function and Sigmoidal Activation Function.
  2. MSE Error Function and Softmax Activation Function.
  3. Cross-entropy Error Function and Softmax Activation Function.

## Compilation
To compile the program, use the following command:
g++ -std=c++11 experiment2.cpp -o experiment2

## Execution
Run the compiled program with:
./experiment2

## Output
The program generates a file named results2.out containing the results of all executions.




# Experiment 3 - Neural Network Evaluation

## Overview
This experiment extends the neural network evaluation to include an online version of the algorithm. The primary focus is to observe the impact of the online version on different architectures and datasets.

### XOR, ProPublica and noMNIST Problems
- Evaluate the best configurations with the online version

## Compilation
To compile the program, use the following command:
g++ -std=c++11 experiment3.cpp -o experiment3

## Execution
Run the compiled program with:
./experiment3

## Output
The program generates a file named results3.out containing the results of all executions.




# Confusion Matrix Analysis

## Overview
This program is designed to obtain the best confusion matrix for each dataset. It analyzes the "seed_x" files generated by running "la," which store the confusion matrices obtained for each seed. The user is prompted to press Enter between datasets to choose the best matrix and overwrite the files with the new dataset.

## Compilation
To compile the program, use the following command:
g++ -std=c++11 conf_matrix_analysis.cpp -o conf_matrix_analysis

## Execution
Run the compiled program with:
./conf_matrix_analysis

## Output
The program generates a file named conf_matrix.out containing the confusion matrices and elapsed times for each execution. Press Enter between datasets to analyze and choose the best matrix.